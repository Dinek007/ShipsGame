/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.1.11 public/rocket/scene.gltf -t -r public
Author: 3DHaupt (https://sketchfab.com/dennish2010)
License: CC-BY-NC-4.0 (http://creativecommons.org/licenses/by-nc/4.0/)
Source: https://sketchfab.com/3d-models/sci-fi-rocket-cc03a630a1c24e62b64186588560cc55
Title: Sci-Fi Rocket
*/

import * as THREE from 'three'
import React, { useRef } from 'react'
import { useGLTF } from '@react-three/drei'
import { GLTF } from 'three-stdlib'
import { useFrame } from '@react-three/fiber'
import { boardsActions, gameStatuses } from '../../redux/boards/boards.slice'
import { useDispatch, useSelector } from 'react-redux'
import { boardsSelectors } from '../../redux/boards/boards.selectors'

type GLTFResult = GLTF & {
  nodes: {
    Anti_Air_System_Rocket001_0: THREE.Mesh
  }
  materials: {
    UVMap: THREE.MeshPhysicalMaterial
  }
}

export function Rocket({bulletRef, position, setBulletFired, bulletFired, isPlayer, isSecondAnimation}) {
  const { nodes, materials } = useGLTF('/rocket/scene.gltf') as GLTFResult
  const dispatch = useDispatch()

  const secondAnimationXandY = useSelector(boardsSelectors.getSecondAnimationXandY)

  const changeBallInTimeX = 0;
  const changeBallInTimey = 0.04
  let rotation

  if(!isSecondAnimation){
    rotation = [-Math.PI / 2, 0, 0]
  } else {
    rotation = [-Math.PI / 2, Math.PI, 0]
  }


  useFrame(() => {
    if (bulletFired && bulletRef.current && !isSecondAnimation) {
      // Poruszanie kuli wzdłuż osi x
      if (isPlayer) {
        bulletRef.current.position.x += changeBallInTimeX;
        bulletRef.current.position.y += changeBallInTimey;
      } else {
        bulletRef.current.position.x -= changeBallInTimeX;
        bulletRef.current.position.y += changeBallInTimey;
      }

      // Sprawdzanie, czy kula dotarła do końca
      if (bulletRef.current.position.y > 4) {
        if (isPlayer) {
          setBulletFired(false);
          dispatch(boardsActions.setGameStatus(gameStatuses.playerSecondAnimation));

        } else {      
          setBulletFired(false);
          dispatch(boardsActions.setGameStatus(gameStatuses.aiSecondAnimation));

        }
      }
    }





    // start animation player
    // start animation player2
    // start animation ai
    // start animation ai2
    // start animation player2
    // start animation ai
    // start animation ai2
    // start animation player2
    // start animation ai
    // start animation ai2











    if (bulletFired && bulletRef.current && isSecondAnimation) {
      // Poruszanie kuli wzdłuż osi x
      if (isPlayer) {
        bulletRef.current.position.x += changeBallInTimeX;
        bulletRef.current.position.y -= changeBallInTimey;
      } else {
        bulletRef.current.position.x -= changeBallInTimeX;
        bulletRef.current.position.y -= changeBallInTimey;
      }

      // Sprawdzanie, czy kula dotarła do końca
      if (bulletRef.current.position.y < (secondAnimationXandY.y + 0.7)) {
        if (isPlayer) {
          setBulletFired(false);

          dispatch(boardsActions.setGameStatus(gameStatuses.playerTurn));
        } else {      
          

          dispatch(boardsActions.setGameStatus(gameStatuses.aiAnimation));


        }
      }
    }
  });



  return (
    <group ref={bulletRef} position={position} dispose={null}>
      <mesh  geometry={nodes.Anti_Air_System_Rocket001_0.geometry} material={materials.UVMap} rotation={rotation} scale={0.015} />
    </group>
  )
}

useGLTF.preload('/rocket/scene.gltf')

